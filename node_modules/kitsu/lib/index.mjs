import s from"axios";import e from"pluralize";import{camel as a,snake as t,kebab as r,query as i,deserialise as c,error as h,splitModel as l,serialise as o}from"kitsu-core";export default class{constructor(i={}){!1===i.camelCaseTypes?this.camel=s=>s:this.camel=a,"none"===i.resourceCase?this.resCase=s=>s:"snake"===i.resourceCase?this.resCase=t:this.resCase=r,!1===i.pluralize?this.plural=s=>s:this.plural=e,this.headers=Object.assign({},i.headers,{Accept:"application/vnd.api+json","Content-Type":"application/vnd.api+json"}),this.axios=s.create(Object.assign({},{baseURL:i.baseURL||"https://kitsu.io/api/edge",timeout:i.timeout||3e4},i.axiosOptions)),this.fetch=this.get,this.update=this.patch,this.create=this.post,this.remove=this.delete,this.interceptors=this.axios.interceptors}async get(s,e={},a={}){try{const[t,r,h]=s.split("/");let l=this.plural(this.resCase(t));r&&(l+="/".concat(r)),h&&(l+="/".concat(this.resCase(h)));const{data:o}=await this.axios.get(l,{params:e,paramsSerializer:s=>i(s),headers:Object.assign(this.headers,a)});return c(o)}catch(s){throw h(s)}}async patch(s,e,a={}){try{const[t,r]=l(s,{resourceCase:this.resCase,pluralModel:this.plural}),i=o(t,e,"PATCH",{camelCaseTypes:this.camel,pluralTypes:this.plural}),h=(null==e?void 0:e.id)?"".concat(r,"/").concat(e.id):r,{data:p}=await this.axios.patch(h,i,{headers:Object.assign(this.headers,a)});return c(p)}catch(s){throw h(s)}}async post(s,e,a={}){try{const[t,r]=l(s,{resourceCase:this.resCase,pluralModel:this.plural}),{data:i}=await this.axios.post(r,o(t,e,"POST",{camelCaseTypes:this.camel,pluralTypes:this.plural}),{headers:Object.assign(this.headers,a)});return c(i)}catch(s){throw h(s)}}async delete(s,e,a={}){try{const[t,r]=l(s,{resourceCase:this.resCase,pluralModel:this.plural});let i,c;Array.isArray(e)?(i=r,c=e.map(s=>({id:s}))):(i="".concat(r,"/").concat(e),c={id:e});const{data:h}=await this.axios.delete(i,{data:o(t,c,"DELETE",{camelCaseTypes:this.camel,pluralTypes:this.plural}),headers:Object.assign(this.headers,a)});return h}catch(s){throw h(s)}}async self(s={},e={}){try{return(await this.get("users",Object.assign({filter:{self:!0}},s),e)).data[0]}catch(s){throw h(s)}}async request({body:s,method:e,params:a,type:t,url:r},l={}){try{var p;e=(null===(p=e)||void 0===p?void 0:p.toUpperCase())||"GET";const{data:h}=await this.axios.request({method:e,url:r,data:["GET","DELETE"].includes(e)?void 0:o(t,s,e,{camelCaseTypes:this.camel,pluralTypes:this.plural}),params:a,paramsSerializer:s=>i(s),headers:Object.assign(this.headers,l)});return c(h)}catch(s){throw h(s)}}}
